[project]
name = "dundie"
description = "Reward Point System for Dunder Mifflin"
authors = [{ name = "Bruno Rocha", email = "Bruno@rocha.com" }]
requires-python = ">=3.9"
license = { text = "MIT" }
dynamic = ["version", "readme"]
dependencies = [
    "aiosmtpd>=1.4.6",
    "alembic>=1.13.3",
    "click>=8.1.7",
    "httpx>=0.27.2",
    "pwdlib[argon2]>=0.2.1",
    "pydantic<2.0",
    "rich>=13.9.3",
    "rich-click>=1.8.3",
    "setuptools>=75.2.0",
    "sqlalchemy==1.4.35",
    "sqlmodel>=0.0.8",
]

[project.urls]
Homepage = 'https://dundermifflin.com'
Source = 'https://github.com/dm/dundie'

[project.scripts]
dundie = "dundie.__main__:main"

[project.optional-dependencies]
test = [
    "coverage>=7.6.4",
    "pytest>=8.3.3",
    "pytest-cov>=5.0.0",
    "pytest-forked>=1.6.0",
    "types-setuptools>=75.2.0.20241025",
]

[build-system]
requires = ["setuptools>=45", "setuptools_scm[toml]>=6.2"]
build-backend = 'setuptools.build_meta'

[tool.setuptools]
packages = ["dundie"]

[tool.setuptools.dynamic]
readme = { file = ["README.md"] }

[tool.setuptools_scm]
write_to = "dundie/VERSION.txt"

[tool.pytest.ini_options]
addopts = "-ra -q -vv"
testpaths = ["tests", "integration"]
markers = [
    "unit: Mark for unit tests",
    "integration: Mark for integration tests",
    "high: High priority",
    "medium: Medium priority",
    "low: Low priority",
    "no_test_db: Tests that don't requires a test database",
]
filterwarnings = ["ignore::DeprecationWarning"]

[dependency-groups]
dev = [
    "ipdb>=0.13.13",
    "pytest-watch>=4.2.0",
    "taskipy>=1.14.0",
    "types-setuptools>=75.2.0.20241025",
]

[tool.ruff]
line-length = 101
indent-width = 4
target-version = "py310"

[tool.taskipy.tasks]
lint = { help = "Run ruff Linter", cmd = "uvx ruff check dundie integration tests" }
fmt = { help = "Run ruff formatter", cmd = "uvx ruff format dundie integration tests" }
docs = { help = "Run docs build", cmd = "uvx mkdocs build --clean" }
docs-serve = { help = "Start documentation server", cmd = "uvx mkdocs serve" }

test = { help = "Run Pytest", cmd = """
uv run --extra test pytest -s --cov=dundie --forked
uv run --extra test coverage xml
uv run --extra test coverage html
""" }

clean = {help = "Clean environment", cmd = """\
#! /usr/bin/env bash
find ./ -name '*.pyc' -exec rm -f {} \\;
find ./ -name '__pycache__' -exec rm -rf {} \\;
find ./ -name 'Thumbs.db' -exec rm -f {} \\;
find ./ -name '*~' -exec rm -f {} \\;
rm -rf {.cache,.pytest_cache,.mypy_cache,htmlcov,docs/_build}"""}

resetdb = {help = "Cleanup database file", cmd = """
echo "Are you sure you want to reset the project db? [y/N] "
read reply

echo    # (optional) move to a new line
if (echo $reply | grep -E "^(y|Y)$"); then
    rm -rf assets/database.db
    uv run python -m aiosmtpd -n &
    uv run dundie load assets/people.csv
    uv run alembic stamp head
    pkill -fc aiosmtpd
else
    echo "Reset canceled"
fi"""}